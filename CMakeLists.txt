cmake_minimum_required(VERSION 3.22)
project(kermac-ptx)

# --- write a 1â€‘line stub kernel ---------------------------------------------
file(WRITE ${CMAKE_BINARY_DIR}/ptx_probe.cu "__global__ void noop(){}")

# --- ask nvcc to emit PTX only (fast) ---------------------------------------
execute_process(
  COMMAND nvcc
          -ptx                       # PTX output only
          -arch=sm_52               # any architecture works
          ${CMAKE_BINARY_DIR}/ptx_probe.cu
          -o ${CMAKE_BINARY_DIR}/ptx_probe.ptx
  RESULT_VARIABLE _ptx_res
  OUTPUT_QUIET ERROR_QUIET)

if(NOT _ptx_res EQUAL 0)
  message(FATAL_ERROR "nvcc probe failed")
endif()

# --- read the .version line --------------------------------------------------
file(STRINGS ${CMAKE_BINARY_DIR}/ptx_probe.ptx _v_line REGEX "^\\.version")
string(REGEX REPLACE "^\\.version +([0-9]+\\.[0-9]+).*$" "\\1" PTX_ISA "${_v_line}")

# --- cache it for the rest of the build -------------------------------------
set(PTX_ISA "${PTX_ISA}" CACHE INTERNAL "PTX ISA generated by nvcc")
message(STATUS "Detected PTX ISA ${PTX_ISA}")

set(SM_VERSION compute_80)
set(KERMAC_VERSION 0.1.0)

if(NOT PTX_ISA EQUAL "7.8")
    message(FATAL_ERROR "Not compiling with 7.8 ptx isa version")
endif()

set(CUDA_SOURCE_FILES csrc/p_norm.cu)

# Custom command to generate PTX
foreach(CUDA_FILE ${CUDA_SOURCE_FILES})
    get_filename_component(CUDA_FILE_NAME ${CUDA_FILE} NAME_WE)
    set(PTX_OUTPUT "${CMAKE_SOURCE_DIR}/ptx/${CUDA_FILE_NAME}.ptx")
    set(PTX_GZ_OUTPUT "${CMAKE_SOURCE_DIR}/ptx/${CUDA_FILE_NAME}.ptx.gz")
    
    add_custom_command(
        OUTPUT ${PTX_OUTPUT}
        COMMAND nvcc -ptx 
            ${CMAKE_SOURCE_DIR}/${CUDA_FILE} 
            -o ${PTX_OUTPUT} 
            -arch=${SM_VERSION}
            --expt-relaxed-constexpr
            -Xcompiler=-fno-strict-aliasing
            --expt-extended-lambda
            -O3
            -I${CMAKE_SOURCE_DIR}/include
            -I${CMAKE_SOURCE_DIR}/thirdparty/cutlass/include
        DEPENDS ${CUDA_FILE}
        COMMENT "Generating PTX for ${CUDA_FILE}"
      )
      add_custom_command(
        OUTPUT ${PTX_GZ_OUTPUT}
        COMMAND ${CMAKE_COMMAND} -E touch -t 202501010000.00 ${PTX_OUTPUT}
        COMMAND gzip -n -k -f ${PTX_OUTPUT}
        DEPENDS ${PTX_OUTPUT}
        COMMENT "Normalizing timestamp and gzipping PTX for ${CUDA_FILE}"
      )
    
    list(APPEND PTX_FILES ${PTX_GZ_OUTPUT})
endforeach()

# Custom target to trigger PTX generation
add_custom_target(generate_ptx ALL DEPENDS ${PTX_FILES})
